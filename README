# interactive-ml-project-1
First project in the course 'Machine learning as a tool for interactive products'

=========
= Files =
=========

ReviewGenerator.py: a generator for reviews and their scores

textVectorization/text_vectorization.py: library containing a couple of different text vectorizers
    dependencies: gensim
    recommended: cython - needed for faster training speed

textVectorization/RakeExtractor.py: An attempt at the RAKE algorithm using nltk

dataParsing/data_organizer.py: An organizer for the 8mil reviews file
    dependencies: FileData, Parser

reviewSentiment.SentimentAnalyzer: a place to try out sentiment analysis using the different vectorization
                                   models

===============
= Description =
===============

This research project attempts to change a given text's sentiment without altering its structure/

=========
= TODOS =
=========

TODO try to vectorize whole reviews by weighted average of tf-idf score * w2v vector - link 4
TODO think again about using adjectives only

=========
= LINKS =
=========

1. Possible entire implementation of classifier including access to influential words:
https://towardsdatascience.com/basic-binary-sentiment-analysis-using-nltk-c94ba17ae386

2. Amazon 8 million review data set:
http://snap.stanford.edu/data/web-Movies.html

3. Multiclass classification with sklearn, thank you Yuval:
https://towardsdatascience.com/multi-class-text-classification-with-scikit-learn-12f1e60e0a9f

4. Ways to vectorize document given a word vectorizer:
https://stackoverflow.com/questions/29760935/how-to-get-vector-for-a-sentence-from-the-word2vec-of-tokens-in-sentence

5. Dealing with imbalanced data:
https://elitedatascience.com/imbalanced-classes

=========
= Notes =
=========

Not sure if this is needed but I wrote some code that uses pre-trained models from 'gensim' to turn words into
vectors using the Word2Vec algorithm. This might help since, using this technique, similar words are mapped to
similar vectors. That makes it easier make good context of words and sentences.

I might need to map whole reviews into vectors as well.

Tried method in link no. 1 but it doesn't work well on multiclass, didn't try binary classification.
tfidf vectorizer kinda works, might need to use it in combination with w2v

tried 2 more methods for dealing with imbalanced data from link 5, best accuracy i got so far is 50%

if i want to rid the text of spelling mistakes and stopwords im going to need a lot more processing power
