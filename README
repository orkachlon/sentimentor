# interactive-ml-project-1
First project in the course 'Machine learning as a tool for interactive products'

=========
= Files =
=========

ReviewGenerator.py: a generator for reviews and their scores

textVectorization/text_vectorization.py: library containing a couple of different text vectorizers
    dependencies: gensim
    recommended: cython - needed for faster training speed

textVectorization/RakeExtractor.py: An attempt at the RAKE algorithm using nltk

dataParsing/data_organizer.py: An organizer for the 8mil reviews file
    dependencies: FileData, Parser

reviewSentiment.SentimentAnalyzer: a place to try out sentiment analysis using the different vectorization
                                   models

===============
= Description =
===============

This research project attempts to change a given text's sentiment without altering its structure/

=========
= TODOS =
=========

TODO add binary arg to parser to specify if the input file should be read in binary mode
TODO test combined classifier on bigger data to see if better than flair alone
TODO fixed relative paths to be able to run code from nlp_module.py

=========
= LINKS =
=========

1. Possible entire implementation of classifier including access to influential words:
https://towardsdatascience.com/basic-binary-sentiment-analysis-using-nltk-c94ba17ae386

2. Amazon 8 million review data set:
http://snap.stanford.edu/data/web-Movies.html

3. Multiclass classification with sklearn, thank you Yuval:
https://towardsdatascience.com/multi-class-text-classification-with-scikit-learn-12f1e60e0a9f

4. Ways to vectorize document given a word vectorizer:
https://stackoverflow.com/questions/29760935/how-to-get-vector-for-a-sentence-from-the-word2vec-of-tokens-in-sentence

5. Dealing with imbalanced data:
https://elitedatascience.com/imbalanced-classes

6. Simple kNN implementation:
https://towardsdatascience.com/knn-using-scikit-learn-c6bed765be75

7. Pre-trained networks:
https://medium.com/@b.terryjack/nlp-pre-trained-sentiment-analysis-1eb52a9d742c

8. List of positive and negative words. Used as vocabulary for TfidfVectorizer:
https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#lexicon

=========
= Notes =
=========

Not sure if this is needed but I wrote some code that uses pre-trained models from 'gensim' to turn words into
vectors using the Word2Vec algorithm. This might help since, using this technique, similar words are mapped to
similar vectors. That makes it easier make good context of words and sentences.

I might need to map whole reviews into vectors as well.

Tried method in link no. 1 but it doesn't work well on multiclass, didn't try binary classification.
tfidf vectorizer kinda works, might need to use it in combination with w2v

tried 2 more methods for dealing with imbalanced data from link 5, best accuracy i got so far is 50%

if i want to rid the text of spelling mistakes and stopwords im going to need a lot more processing power


=================
= from 21.04.20 =
=================

- make classifier more basic - binary or even pre trained
- concentrate on making a working version of the entire process
- get couple hundred relevant words to replace and use them as vocabulary
- till sunday present something that kinda works

================
= Program flow =
================

1. write review -> 2. submit -> 3. predict score onto score slider -> 4. use slider to change sentiment ->
5. refresh to start again

1. pretty much done, just need to make design choices
2. press enter or 'submit' button
3. make cmd interface for the classifier and java wrapper class, create slider
4. get synonyms for each word in vocab to replace in review or use Word2Vec to get synonyms
5. make refresh button


=======
= API =
=======

dev/nlp_module.py:
    Usage: nlp_module.py <review: str>
    Output:  ['POSITIVE'/'NEGATIVE, <confidence>]
             [{syn1, syn2, syn3, syn4},...,{syn1, syn2, syn3, syn4}]

    classify(review: str):
        Returns flair classification of given review -
            ['POSITIVE'/'NEGATIVE', <confidence>]
    extract_features(review: str):
        Returns a dictionary of features and their synonyms from this review -
            {feature_1: [syn1, syn2], ..., feature_n: [syn1, syn2]}
